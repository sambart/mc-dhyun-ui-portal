buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.maxhenkel.de/repository/public' }
        mavenLocal()
    }
    dependencies {
        classpath group: 'de.maxhenkel.forge-update', name: 'forge-update', version: '1.0.4'
    }
}

plugins {
    id 'org.quiltmc.loom' version '0.12-SNAPSHOT'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

apply plugin: 'forge-update'
apply plugin: 'com.modrinth.minotaur'

sourceCompatibility = JavaLanguageVersion.of(java_version as int)
targetCompatibility = JavaLanguageVersion.of(java_version as int)

archivesBaseName = archives_base_name
version = mod_version
group = maven_group

repositories {
    mavenCentral()
    maven {
        name = 'Quilt'
        url = 'https://maven.quiltmc.org/repository/release'
    }
    maven {
        name = 'Quilt Snapshots'
        url = 'https://maven.quiltmc.org/repository/snapshot'
    }
    maven { url = 'https://maven.terraformersmc.com/' }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        name = 'henkelmax.public'
        url = 'https://maven.maxhenkel.de/repository/public'
    }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenLocal()
}

runClient.doFirst {
    args = ['--username', "henkelmax${new Random().nextInt(1000)}"]
}

configurations {
    macos
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation("org.quiltmc:quilt-loader:${quilt_loader_version}")

    include(modImplementation("org.quiltmc.quilted-fabric-api:fabric-key-binding-api-v1:2.0.0-alpha.2+0.55.3-1.19"))

    include(modImplementation("org.quiltmc.qsl.core:qsl_base:${qsl_version}"))
    include(modImplementation("org.quiltmc.qsl.core:lifecycle_events:${qsl_version}"))
    include(modImplementation("org.quiltmc.qsl.core:networking:${qsl_version}"))
    include(modImplementation("org.quiltmc.qsl.core:resource_loader:${qsl_version}"))
    include(modImplementation("org.quiltmc.qsl.management:command:${qsl_version}"))

    implementation(project(path: ':common', configuration: 'namedElements')) {
        transitive false
    }

    modCompileOnly("com.terraformersmc:modmenu:${modmenu_version}") {
        transitive false
    }

    modCompileOnly("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        transitive false
    }

    modCompileOnly("me.lucko:fabric-permissions-api:${fabric_permission_api_version}") {
        transitive false
    }

    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.jetbrains:annotations:23.0.0'

    implementation "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"
    shadow "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"

    implementation "de.maxhenkel.opus4j:opus4j:${opus4j_version}"
    shadow "de.maxhenkel.opus4j:opus4j:${opus4j_version}"

    implementation "org.concentus:Concentus:${concentus_version}"
    shadow "org.concentus:Concentus:${concentus_version}"

    implementation "de.maxhenkel.rnnoise4j:rnnoise4j:${rnnoise4j_version}"
    shadow "de.maxhenkel.rnnoise4j:rnnoise4j:${rnnoise4j_version}"

    implementation project(path: ':macos', configuration: 'shadow')
    shadow project(path: ':macos', configuration: 'shadow')
    macos(project(':macos')) {
        transitive(false)
    }

    implementation project(':api')
    shadow project(':api')
}

processResources {
    filesMatching("quilt.mod.json") {
        expand 'mod_id': mod_id,
                'mod_group': maven_group,
                'mod_name': mod_name,
                'mod_vendor': mod_vendor,
                'mod_version': mod_version,
                'java_version': java_version,
                'minecraft_dependency': minecraft_dependency,
                'quilt_loader_version': quilt_loader_version,
                'qsl_version': qsl_version,
                'modmenu_version': modmenu_version,
                'cloth_config_version': cloth_config_version
    }
    from project(":common").sourceSets.main.resources

    doLast {
        copy {
            from(configurations.macos) {
                rename { 'macos.zip' }
            }
            into { "${buildDir}/resources/main" }
        }
    }
}

tasks.withType(JavaCompile) {
    source(project(':common').sourceSets.main.allSource)
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = java_version as int
}

java {
    withSourcesJar()
}

jar {
    manifest {
        attributes([
                "Compatibility-Version": mod_compatibility_version
        ])
    }
    from('LICENSE') {
        rename { "${it}_${archivesBaseName}" }
    }
}

tasks.runClient.doFirst {
    environment 'COMPATIBILITY_VERSION', mod_compatibility_version
}

tasks.runServer.doFirst {
    environment 'COMPATIBILITY_VERSION', mod_compatibility_version
}

curseforge {
    apiKey = file("${rootDir}/curseforge_api_key.txt").exists() ? file("${rootDir}/curseforge_api_key.txt").text : ''
    project {
        id = curse_id
        changelogType = 'markdown'
        changelog = file("changelog.md")
        releaseType = release_type
        addGameVersion curseforge_minecraft_version
        addGameVersion 'Quilt'
        addGameVersion "Java ${java_version}"
        mainArtifact(file("${buildDir}/libs/${archivesBaseName}-${version}.jar")) {
            displayName = "[QUILT][${minecraft_version}] ${mod_name} ${mod_version}"
            relations {
                optionalDependency 'modmenu'
                optionalDependency 'sound-physics-remastered'
                optionalDependency 'cloth-config'
                optionalDependency 'audioplayer'
                optionalDependency 'luckperms'
            }
        }
        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

tasks.modrinth.configure({
    group = 'upload'
})

modrinth {
    token = file("${rootDir}/modrinth_token.txt").exists() ? file("${rootDir}/modrinth_token.txt").text : ''
    projectId = modrinth_id
    versionNumber = "quilt-${mod_version}"
    versionName = "[QUILT][${minecraft_version}] ${mod_name} ${mod_version}"
    uploadFile = remapJar
    versionType = release_type.toUpperCase()
    changelog = file("changelog.md").text
    gameVersions = [minecraft_version]
    loaders = ['quilt']
    dependencies {
        optional.project "mOgUt4GM" // ModMenu
        optional.project "9s6osm5g" // ClothConfig
        optional.project "Vebnzrzj" // LuckPerms
    }
}
tasks.modrinth.dependsOn(build)

forgeUpdate {
    def messages = []
    file("changelog.md").eachLine { String line ->
        if (line.trim().startsWith('-')) {
            messages.add(line.replaceFirst('-', '').trim())
        }
    }

    serverURL = 'https://update.maxhenkel.de/'
    apiKey = file("${rootDir}/forge_update_api_key.txt").exists() ? file("${rootDir}/forge_update_api_key.txt").text : ''
    modID = mod_id
    gameVersion = minecraft_version
    modLoader = 'quilt'
    modVersion = mod_version
    updateMessages = messages
    releaseType = release_type
    tags = recommended == 'true' ? ['recommended'] : []
}

shadowJar {
    configurations = [project.configurations.shadow]
    classifier 'shadow-dev'
    relocate 'de.maxhenkel.configbuilder', "de.maxhenkel.${mod_id}.configbuilder"
    relocate 'de.maxhenkel.opus4j', "de.maxhenkel.${mod_id}.opus4j"
    relocate 'org.concentus', "de.maxhenkel.${mod_id}.concentus"
    relocate 'de.maxhenkel.rnnoise4j', "de.maxhenkel.${mod_id}.rnnoise4j"
    relocate 'com.dd.plist', "de.maxhenkel.${mod_id}.com.dd.plist"
    dependencies {
        exclude(dependency('net.java.dev.jna:jna'))
        exclude(dependency('net.java.dev.jna:jna-platform'))
        exclude(dependency('com.google.code.findbugs:jsr305'))
    }
}

prepareRemapJar {
    dependsOn shadowJar
}

remapJar {
    input = shadowJar.archiveFile.get()
}
